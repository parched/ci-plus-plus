on:
  pull_request: null
  push: null
#    targets:
#      - checks
#      - docs
#      - say-hi

jobs:
  docs:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git sparse-checkout init --cone
        cat <<EOF > .git/info/sparse-checkout
        /*
        !/*/
        EOF
        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - run: echo building docs from readme

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-docs }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-docs
      == 'true')
  say-hi:
    runs-on: ubuntu-20.04
    steps:
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - run: echo HI

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-say-hi }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success')
  flake8:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry
        poetry install

    - run: poetry run flake8

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-flake8 }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-flake8
      == 'true')
  pyright:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry
        poetry install

    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - run: npm install -g pyright@1.1.234
    - run: poetry run pyright

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-pyright }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-pyright
      == 'true')
  pylint:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry
        poetry install

    - run: poetry run pylint src tests

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-pylint }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-pylint
      == 'true')
  pytest:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry
        poetry install

    - run: poetry run pytest

    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-pytest }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-pytest
      == 'true')
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry
        poetry install

    - run: poetry build
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: dist/
        key: ${{ needs.cixx.outputs.key-build }}
    needs:
    - cixx
    if: always() && (needs.cixx.result == 'success') && (needs.cixx.outputs.needs-build-build
      == 'true')
  check-self:
    runs-on: ubuntu-20.04
    needs:
    - build
    - cixx
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git sparse-checkout init --cone
        cat <<EOF > .git/info/sparse-checkout
        /*
        !/*/
        /.ci++/
        /.github/
        !/.github/*/
        /.github/workflows/
        EOF
        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Restore build
      uses: martijnhols/actions-cache/restore@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: dist/
        key: ${{ needs.cixx.outputs.key-build }}
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install cixx --find-links dist/
        ci++ ".ci++/main.yml" ".github/workflows/main.yml.new"
        diff ".github/workflows/main.yml.new" ".github/workflows/main.yml"


    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ needs.cixx.outputs.key-check-self }}
    if: always() && (needs.cixx.result == 'success') && (needs.build.result == 'success'
      || needs.build.result == 'skipped') && (needs.cixx.outputs.needs-build-check-self
      == 'true')
  cixx:
    runs-on: ubuntu-20.04
    steps:
    - id: git-fetch
      name: Git fetch
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git -c protocol.version=2 fetch --filter=blob:none --depth=1 origin ${GITHUB_SHA}
    - id: generate-keys
      name: Generate keys
      shell: bash
      run: |
        function git_hash_files {
            local files="true"

            for file in "$@"
            do
                if [ $files = "true" ]
                then
                    if [ "$file" = "--" ]
                    then
                        files="false"
                    elif [ -n "$file" ]
                    then
                        sha=$(git rev-parse "${GITHUB_SHA}:$file")
                        echo "$file: $sha" 1>&2
                        echo -n $sha
                    fi
                else
                    echo "string: $file" 1>&2
                    echo -n "$file"
                fi
            done | git hash-object --stdin
        }
        declare -A keys
        keys[docs]="docs-$(git_hash_files "README.md" -- )"
        echo "::set-output name=docs::${keys[docs]}"

        keys[say-hi]="say-hi-$RANDOM$RANDOM"
        echo "::set-output name=say-hi::${keys[say-hi]}"

        keys[flake8]="flake8-$(git_hash_files "." -- )"
        echo "::set-output name=flake8::${keys[flake8]}"

        keys[pyright]="pyright-$(git_hash_files "." -- )"
        echo "::set-output name=pyright::${keys[pyright]}"

        keys[pylint]="pylint-$(git_hash_files "." -- )"
        echo "::set-output name=pylint::${keys[pylint]}"

        keys[pytest]="pytest-$(git_hash_files "." -- )"
        echo "::set-output name=pytest::${keys[pytest]}"

        keys[build]="build-$(git_hash_files "." -- )"
        echo "::set-output name=build::${keys[build]}"

        keys[build]="build-$(git_hash_files "." -- )"
        echo "::set-output name=build::${keys[build]}"

        keys[check-self]="check-self-$(git_hash_files ".ci++" ".github/workflows" -- "${keys[build]}")"
        echo "::set-output name=check-self::${keys[check-self]}"
    - name: Check docs cache
      id: check-cache-docs
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.docs }}
    - name: Check flake8 cache
      id: check-cache-flake8
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.flake8 }}
    - name: Check pyright cache
      id: check-cache-pyright
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.pyright }}
    - name: Check pylint cache
      id: check-cache-pylint
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.pylint }}
    - name: Check pytest cache
      id: check-cache-pytest
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.pytest }}
    - name: Check build cache
      id: check-cache-build
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: dist/
        key: ${{ steps.generate-keys.outputs.build }}
    - name: Check check-self cache
      id: check-cache-check-self
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_dummy_path
        key: ${{ steps.generate-keys.outputs.check-self }}
    outputs:
      key-docs: ${{ steps.generate-keys.outputs.docs }}
      key-say-hi: ${{ steps.generate-keys.outputs.say-hi }}
      key-flake8: ${{ steps.generate-keys.outputs.flake8 }}
      key-pyright: ${{ steps.generate-keys.outputs.pyright }}
      key-pylint: ${{ steps.generate-keys.outputs.pylint }}
      key-pytest: ${{ steps.generate-keys.outputs.pytest }}
      key-build: ${{ steps.generate-keys.outputs.build }}
      key-check-self: ${{ steps.generate-keys.outputs.check-self }}
      needs-build-docs: ${{ steps.check-cache-docs.outputs.cache-hit != 'true' }}
      needs-build-flake8: ${{ steps.check-cache-flake8.outputs.cache-hit != 'true'
        }}
      needs-build-pyright: ${{ steps.check-cache-pyright.outputs.cache-hit != 'true'
        }}
      needs-build-pylint: ${{ steps.check-cache-pylint.outputs.cache-hit != 'true'
        }}
      needs-build-pytest: ${{ steps.check-cache-pytest.outputs.cache-hit != 'true'
        }}
      needs-build-build: ${{ steps.check-cache-build.outputs.cache-hit != 'true' }}
      needs-build-check-self: ${{ steps.check-cache-check-self.outputs.cache-hit !=
        'true' }}
