on:
  pull_request: null
  push:
    branches:
    - main
#    targets:
#      - checks
#      - docs
#      - say-hi

jobs:
  cixx-init:
    runs-on: ubuntu-20.04
    steps:
    - id: git-fetch
      name: Git fetch
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git -c protocol.version=2 fetch --filter=blob:none --depth=1 origin ${GITHUB_SHA}
    - id: generate-keys
      name: Generate keys
      shell: bash
      run: |
        function git_hash_files {
            local files="true"

            for file in "$@"
            do
                if [ $files = "true" ]
                then
                    if [ "$file" = "--" ]
                    then
                        files="false"
                    elif [ -n "$file" ]
                    then
                        sha=$(git rev-parse "${GITHUB_SHA}:$file")
                        echo "$file: $sha" 1>&2
                        echo -n $sha
                    fi
                else
                    echo "string: $file" 1>&2
                    echo -n "$file"
                fi
            done | git hash-object --stdin
        }
        declare -A keys
        keys[docs]="docs-$(git_hash_files "README.md" -- )"
        echo "::set-output name=docs::${keys[docs]}"

        keys[say-hi]="say-hi-$RANDOM$RANDOM"
        echo "::set-output name=say-hi::${keys[say-hi]}"

        keys[poetry-flake8]="poetry-flake8-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-flake8::${keys[poetry-flake8]}"

        keys[poetry-pyright]="poetry-pyright-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-pyright::${keys[poetry-pyright]}"

        keys[poetry-pylint]="poetry-pylint-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-pylint::${keys[poetry-pylint]}"

        keys[poetry-pytest]="poetry-pytest-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-pytest::${keys[poetry-pytest]}"

        keys[poetry-build]="poetry-build-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-build::${keys[poetry-build]}"

        keys[poetry-build]="poetry-build-$(git_hash_files "." -- )"
        echo "::set-output name=poetry-build::${keys[poetry-build]}"

        keys[check-self]="check-self-$(git_hash_files ".ci++" ".github/workflows" -- "${keys[poetry-build]}")"
        echo "::set-output name=check-self::${keys[check-self]}"
    - name: Check docs cache
      id: check-cache-docs
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_docs.json
        key: ${{ steps.generate-keys.outputs.docs }}
    - name: Check poetry-flake8 cache
      id: check-cache-poetry-flake8
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-flake8.json
        key: ${{ steps.generate-keys.outputs.poetry-flake8 }}
    - name: Check poetry-pyright cache
      id: check-cache-poetry-pyright
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pyright.json
        key: ${{ steps.generate-keys.outputs.poetry-pyright }}
    - name: Check poetry-pylint cache
      id: check-cache-poetry-pylint
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pylint.json
        key: ${{ steps.generate-keys.outputs.poetry-pylint }}
    - name: Check poetry-pytest cache
      id: check-cache-poetry-pytest
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pytest.json
        key: ${{ steps.generate-keys.outputs.poetry-pytest }}
    - name: Check poetry-build cache
      id: check-cache-poetry-build
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: "dist/\n__cixx_outputs_poetry-build.json"
        key: ${{ steps.generate-keys.outputs.poetry-build }}
    - name: Check check-self cache
      id: check-cache-check-self
      uses: martijnhols/actions-cache/check@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_check-self.json
        key: ${{ steps.generate-keys.outputs.check-self }}
    outputs:
      key-docs: ${{ steps.generate-keys.outputs.docs }}
      key-say-hi: ${{ steps.generate-keys.outputs.say-hi }}
      key-poetry-flake8: ${{ steps.generate-keys.outputs.poetry-flake8 }}
      key-poetry-pyright: ${{ steps.generate-keys.outputs.poetry-pyright }}
      key-poetry-pylint: ${{ steps.generate-keys.outputs.poetry-pylint }}
      key-poetry-pytest: ${{ steps.generate-keys.outputs.poetry-pytest }}
      key-poetry-build: ${{ steps.generate-keys.outputs.poetry-build }}
      key-check-self: ${{ steps.generate-keys.outputs.check-self }}
      needs-build-docs: ${{ steps.check-cache-docs.outputs.cache-hit != 'true' }}
      needs-build-poetry-flake8: ${{ steps.check-cache-poetry-flake8.outputs.cache-hit
        != 'true' }}
      needs-build-poetry-pyright: ${{ steps.check-cache-poetry-pyright.outputs.cache-hit
        != 'true' }}
      needs-build-poetry-pylint: ${{ steps.check-cache-poetry-pylint.outputs.cache-hit
        != 'true' }}
      needs-build-poetry-pytest: ${{ steps.check-cache-poetry-pytest.outputs.cache-hit
        != 'true' }}
      needs-build-poetry-build: ${{ steps.check-cache-poetry-build.outputs.cache-hit
        != 'true' }}
      needs-build-check-self: ${{ steps.check-cache-check-self.outputs.cache-hit !=
        'true' }}
  docs:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-docs
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git sparse-checkout init --cone
        cat <<EOF > .git/info/sparse-checkout
        /*
        !/*/
        EOF
        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - run: echo building docs from readme
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_docs.json
        key: ${{ needs.cixx-init.outputs.key-docs }}
    runs-on: ubuntu-20.04
  say-hi:
    if: always() && (needs.cixx-init.result == 'success')
    needs:
    - cixx-init
    steps:
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - run: echo HI
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_say-hi.json
        key: ${{ needs.cixx-init.outputs.key-say-hi }}
    runs-on: ubuntu-20.04
  poetry-flake8:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-poetry-flake8
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry==1.2.0b1
    - run: poetry install --no-root --only flake8
    - run: poetry run flake8
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-flake8.json
        key: ${{ needs.cixx-init.outputs.key-poetry-flake8 }}
    runs-on: ubuntu-20.04
  poetry-pyright:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-poetry-pyright
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry==1.2.0b1
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - run: npm install -g pyright@1.1.234
    - run: poetry install
    - run: poetry run pyright
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pyright.json
        key: ${{ needs.cixx-init.outputs.key-poetry-pyright }}
    runs-on: ubuntu-20.04
  poetry-pylint:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-poetry-pylint
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry==1.2.0b1
    - run: poetry install
    - run: poetry run pylint src tests
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pylint.json
        key: ${{ needs.cixx-init.outputs.key-poetry-pylint }}
    runs-on: ubuntu-20.04
  poetry-pytest:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-poetry-pytest
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry==1.2.0b1
    - run: poetry install
    - run: poetry run pytest
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_poetry-pytest.json
        key: ${{ needs.cixx-init.outputs.key-poetry-pytest }}
    runs-on: ubuntu-20.04
  poetry-build:
    if: always() && (needs.cixx-init.result == 'success') && (needs.cixx-init.outputs.needs-build-poetry-build
      == 'true')
    needs:
    - cixx-init
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0

        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - run: |
        pip install poetry==1.2.0b1
    - run: poetry build
    - id: timestamp
      run: echo "::set-output name=timestamp::$(date)"
    - name: Save outputs
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE
        cat <<EOF > __cixx_outputs_poetry-build.json
        {"timestamp":${{toJson(steps.timestamp.outputs.timestamp)}}}
        EOF
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: "dist/\n__cixx_outputs_poetry-build.json"
        key: ${{ needs.cixx-init.outputs.key-poetry-build }}
    runs-on: ubuntu-20.04
  check-self:
    if: always() && (needs.cixx-init.result == 'success') && (needs.poetry-build.result
      == 'success' || needs.poetry-build.result == 'skipped') && (needs.cixx-init.outputs.needs-build-check-self
      == 'true')
    needs:
    - cixx-init
    - poetry-build
    steps:
    - name: Git clone
      shell: bash
      run: |
        git init .
        git remote add origin "https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
        git config --local gc.auto 0
        git sparse-checkout init --cone
        cat <<EOF > .git/info/sparse-checkout
        /*
        !/*/
        /.ci++/
        /.github/
        !/.github/*/
        /.github/workflows/
        EOF
        git -c protocol.version=2 fetch --no-tags --depth=1 origin ${GITHUB_SHA}
        git checkout ${GITHUB_SHA}
    - if: runner.os == 'Windows'
      name: Use GNU tar instead BSD tar
      shell: cmd
      run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
    - name: Check zstd on PATH
      shell: bash
      run: which zstd
    - name: Restore poetry-build
      uses: martijnhols/actions-cache/restore@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: "dist/\n__cixx_outputs_poetry-build.json"
        key: ${{ needs.cixx-init.outputs.key-poetry-build }}
    - name: Read outputs
      id: cixx-outputs
      shell: bash
      run: |-
        output=$(sed -e s/%/%25/g -e s/\r/%0D/g -e s/\n/%0A/g __cixx_outputs_poetry-build.json)
        echo "::set-output name=poetry-build::$output"
    - run: echo "Built at ${{ fromJSON(steps.cixx-outputs.outputs.poetry-build).timestamp
        }}"
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - run: |
        pip install cixx --find-links dist/
        ci++ ".ci++/main.yml" ".github/workflows/main.yml.new"
        diff ".github/workflows/main.yml.new" ".github/workflows/main.yml"
    - name: Commit build
      uses: martijnhols/actions-cache/save@204c5fc6f17f75fc56021276acb5aa4b6a051d8e
      with:
        path: __cixx_outputs_check-self.json
        key: ${{ needs.cixx-init.outputs.key-check-self }}
    runs-on: ubuntu-20.04
